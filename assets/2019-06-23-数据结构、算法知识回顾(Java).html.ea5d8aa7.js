import{_ as p,a as t,o as e,c as o,f as n,b as c,F as l,d as s,x as u}from"./app.3547d211.js";const r={},i=n("h2",{id:"_1\u3001\u524D\u8A00",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1\u3001\u524D\u8A00","aria-hidden":"true"},"#"),s(" 1\u3001\u524D\u8A00")],-1),k=n("li",null,"\u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5\u662F\u8131\u79BB\u7F16\u7A0B\u8BED\u8A00\u675F\u7F1A\u7684\uFF01\u7B97\u6CD5\u662F\u4EC0\u4E48\uFF1F\u7B97\u6CD5\u662F\u7A0B\u5E8F\u52A0\u4E0A\u6570\u636E\u7ED3\u6784\uFF0C\u4E5F\u662F\u5B8C\u6210\u4E00\u9879\u4EFB\u52A1\u7684\u5177\u4F53\u6B65\u9AA4\u3002",-1),b=n("li",null,"\u8FD9\u7BC7\u7B14\u8BB0\u5C06\u56DE\u987E\u57FA\u7840\u7684\u6570\u636E\u7ED3\u6784\uFF08\u5982\uFF1A\u6811\u3001\u56FE\u3001\u94FE\u8868\u3001\u6808\u3001\u5806\u7B49\uFF09\u7684\u7279\u6027\u548C\u590D\u6742\u5EA6\uFF1B\u91CD\u70B9\u653E\u5728\u4F7F\u7528Java\u8BED\u8A00\u6765\u5B9E\u73B0\u8FD9\u4E9B\u57FA\u7840\u6570\u636E\u7ED3\u6784\uFF0C\u5E76\u4E14\u4F7F\u7528Java\u4E2D\u7684\u96C6\u5408\u7C7B\u3001Map\u7C7B\u6765\u5B9E\u73B0\u5BF9\u6570\u636E\u7684\u67E5\u627E\u3001\u6392\u5E8F\u7B49\u3002",-1),m=s("\u8FD9\u7BC7\u7B14\u8BB0\u7684Java\u96C6\u5408\u7C7B\u5B9E\u73B0\u90E8\u5206\u4EE5"),d={href:"https://github.com/TheAlgorithms/Java",target:"_blank",rel:"noopener noreferrer"},f=s("GitHub-yanglbme"),h=s("\u7684\u4EE3\u7801\u4E3A\u53C2\u8003\u3002"),y=n("li",null,"\u7F51\u4E0A\u63CF\u8FF0\u6570\u636E\u7ED3\u6784\u7684\u6559\u7A0B\u4E94\u82B1\u516B\u95E8\uFF0C\u4E2A\u6709\u7279\u8272\u3002\u672C\u4EBA\u672C\u7740\u5B66\u4E60\u7684\u6001\u5EA6\u5BF9\u6570\u636E\u7ED3\u6784\u8FDB\u884C\u4ECE\u6D45\u5230\u6DF1\u7684\u56DE\u987E\u5B66\u4E60\u3002\u4E4B\u524D\u7684D3.js\u535A\u6587\u4E2D\u63D0\u5230\u7684\u521B\u59CB\u4EBA\u7684\u7F51\u7AD9\u5BF9\u6570\u636E\u7ED3\u6784\u7684\u6392\u5E8F\u4E5F\u6709\u4ECB\u7ECD\u548C\u63CF\u8FF0\uFF0C\u5927\u5BB6\u53EF\u4EE5\u53C2\u8003\u3002",-1),g=u(`<h2 id="_2\u3001basics-data-structure" tabindex="-1"><a class="header-anchor" href="#_2\u3001basics-data-structure" aria-hidden="true">#</a> 2\u3001Basics Data Structure</h2><h3 id="_2-1-string" tabindex="-1"><a class="header-anchor" href="#_2-1-string" aria-hidden="true">#</a> 2.1 String</h3><p>String\u76F8\u5173\u7684\u6982\u5FF5\u3001\u65B9\u6CD5\u5728\u5F00\u53D1\u4E2D\u7ECF\u5E38\u7528\u5230\uFF01\u5728Python\u3001C++\u548CJava\u4E2D\u90FD\u5B9A\u4E49\u4E86\u8BB8\u591A\u5173\u4E8E\u5B57\u7B26\u4E32\u64CD\u4F5C\u7684\u65B9\u6CD5\u3002\u5173\u4E8E\u5B57\u7B26\u4E32\u7684\u64CD\u4F5C\uFF0CJava\u4E2D\u8FD8\u5B9A\u4E49\u4E86\u4E09\u4E2A\u7C7BString\u7C7B\u3001StringBuffer\u7C7B\u548CStringBuilder\u7C7B\u56F4\u7ED5\u8FD9\u4E09\u4E2A\u7C7B\u6709\u5927\u91CF\u7684\u65B9\u6CD5\u3002</p><p>\u5728Python\u4E2D\u4E3B\u8981\u7684\u5B57\u7B26\u4E32\u64CD\u4F5C\u6709\u5207\u7247\u3001\u67E5\u627E\u3001\u957F\u5EA6\u7B49\u5982\u4E0B\uFF1A</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;zxcvbnm&quot;</span>
s2len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
s2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#bnm</span>
s2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token comment">#nm</span>
s3 <span class="token operator">+=</span> <span class="token string">&#39;kill&#39;</span>
s2<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u5728Java\u4E2D\uFF0C\u5173\u4E8E\u5B57\u7B26\u4E32\u7684\u64CD\u4F5C\uFF0C\u8981\u683C\u5916\u5C0F\u5FC3\uFF01</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;billryan&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> s2Len <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return &quot;ryan&quot;</span>
<span class="token class-name">StringBuilder</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;bill&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2New <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return &quot;ryanbill&quot;</span>
<span class="token comment">// convert String to char array</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2Char <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// char at index 4</span>
<span class="token keyword">char</span> ch <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return &#39;r&#39;</span>
<span class="token comment">// find index at first</span>
<span class="token keyword">int</span> index <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 4. if not found, return -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_2-2-linked-list-\u300C\u94FE\u8868\u300D" tabindex="-1"><a class="header-anchor" href="#_2-2-linked-list-\u300C\u94FE\u8868\u300D" aria-hidden="true">#</a> 2.2 Linked List \u300C\u94FE\u8868\u300D</h3><ul><li>\u94FE\u8868\u662F\u7EBF\u6027\u8868\u7684\u4E00\u79CD\uFF0C\u7EBF\u6027\u8868\u662F\u6700\u7B80\u5355\u7684\u4E00\u79CD\u6570\u636E\u7ED3\u6784\u3002\u7EBF\u6027\u8868\u6709\u4E24\u79CD\u5B58\u50A8\u65B9\u5F0F\uFF1A\u94FE\u5F0F\u5B58\u50A8\u7ED3\u6784\u548C\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784\u3002\u6570\u7EC4\u5C31\u662F\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784\u3002\u94FE\u8868\u5B58\u50A8\u7ED3\u6784\u4E2D\uFF0C\u4E24\u4E2A\u76F8\u90BB\u7684\u5143\u7D20\u5728\u5185\u5B58\u4E2D\u4E0D\u518D\u8981\u6C42\u662F\u76F8\u90BB\u7684\u3002</li><li>\u5206\u7C7B\uFF1A <ul><li>\u5355\u94FE\u8868</li><li>\u53CC\u94FE\u8868</li><li>\u5FAA\u73AF\u94FE\u8868</li></ul></li><li>\u64CD\u4F5C\uFF1A <ul><li>\u589E\u3001\u5220\u3001\u6539\u3001\u67E5\u3001\u5224\u7A7A\u7B49</li></ul></li></ul><p>Python\u5B9E\u73B0</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u7F16\u7A0B\u5B9E\u73B0</span>
<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token comment"># \u94FE\u8868\u57FA\u672C\u64CD\u4F5C\uFF08\u57FA\u4E8E\u5355\u94FE\u8868\u64CD\u4F5C\uFF09</span>
    <span class="token comment"># \u53CD\u8F6C\u94FE\u8868\uFF1A\u5C061-&gt;2-&gt;3-&gt;null\u53CD\u8F6C\u62103-&gt;2-&gt;1-&gt;null</span>
    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>
        prev <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">while</span> head<span class="token punctuation">:</span>
            temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
            head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev
            prev <span class="token operator">=</span> head
            head <span class="token operator">=</span> temp
        retrun prev

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Java\u5B9E\u73B0</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>
    <span class="token comment">//\u6784\u9020\u51FD\u6570</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u94FE\u8868\u9006\u8F6C</span>
<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//recursive mrthod</span>
<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>\u53CC\u94FE\u8868\u7684\u64CD\u9006\u8F6C\u4F5C\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DListNode</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">DListNode</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
    <span class="token class-name">DListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token comment">//\u53CC\u94FE\u8868\u9006\u8F6C</span>
<span class="token keyword">public</span> <span class="token class-name">DListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">DListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">DLisNode</span> curr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        curr <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
        curr<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u5220\u9664\u94FE\u8868\u4E2D\u7684\u8282\u70B9\u53EA\u9700\u8981<code>prev -&gt; next = prev-&gt;next-&gt;next</code>\u5373\u53EF\u3002</p><h3 id="_2-3-binary-tree-\u300C\u4E8C\u53C9\u6811\u300D" tabindex="-1"><a class="header-anchor" href="#_2-3-binary-tree-\u300C\u4E8C\u53C9\u6811\u300D" aria-hidden="true">#</a> 2.3 Binary Tree \u300C\u4E8C\u53C9\u6811\u300D</h3><p>\u4E8C\u53C9\u6811\u662F\u6BCF\u4E2A\u8282\u70B9\u6700\u591A\u67092\u4E2A\u5B50\u6811\u7684\u6811\u7ED3\u6784\uFF0C\u4E8C\u53C9\u6811\u5E38\u5206\u4E3A\u4E8C\u53C9\u641C\u7D22\u6811\u548C\u4E8C\u53C9\u5806\u3002</p><ul><li><p>\u6EE1\u4E8C\u53C9\u6811</p></li><li><p>\u5B8C\u5168\u4E8C\u53C9\u6811</p></li><li><p>\u5E73\u8861\u4E8C\u53C9\u6811</p></li><li><p>\u7F16\u7A0B\u5B9E\u73B0 Python\u5B9E\u73B0</p></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>sself<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span>left<span class="token punctuation">,</span> self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Java\u5B9E\u73B0</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6811\u7684\u904D\u5386</p><ul><li>\u524D\u5E8F\u904D\u5386\uFF1A\u5148\u6839\u540E\u5DE6\u53F3</li><li>\u4E2D\u5E8F\u904D\u5386\uFF1A\u5148\u5DE6\u53F3\u540E\u6839</li><li>\u540E\u5E8F\u904D\u5386\uFF1A\u5148\u53F3\u5DE6\u540E\u6839</li><li>\u5C42\u6B21\u904D\u5386\uFF1A\u6309\u5C42\u4ECE\u6839\u5F00\u59CB\u904D\u5386</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>left<span class="token punctuation">,</span>self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Traversal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>traverse_path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> root<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>traverse_path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> root<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>traverse_path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> root<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>traverse_path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u4E00\u9897\u4E8C\u53C9\u67E5\u627E\u6811(BST)\u662F\u4E00\u9897\u4E8C\u53C9\u6811\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u8282\u70B9\u90FD\u542B\u6709\u4E00\u4E2A\u53EF\u8FDB\u884C\u6BD4\u8F83\u7684\u952E\u53CA\u76F8\u5E94\u7684\u503C\uFF0C\u4E14\u6BCF\u4E2A\u8282\u70B9\u7684\u952E\u90FD\u5927\u4E8E\u7B49\u4E8E\u5DE6\u5B50\u6811\u4E2D\u7684\u4EFB\u610F\u8282\u70B9\u7684\u952E\uFF0C\u800C\u5C0F\u4E8E\u53F3\u5B50\u6811\u4E2D\u7684\u4EFB\u610F\u8282\u70B9\u7684\u952E\u3002</p><p>\u4F7F\u7528\u4E2D\u5E8F\u904D\u5386\u53EF\u5F97\u5230\u6709\u5E8F\u6570\u7EC4\uFF0C\u8FD9\u662F\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u53C8\u4E00\u4E2A\u91CD\u8981\u7279\u5F81\u3002</p><h3 id="_2-4-huffman-compression-\u300C\u970D\u592B\u66FC\u538B\u7F29\u300D\u300C\u970D\u592B\u66FC\u7F16\u7801\u300D" tabindex="-1"><a class="header-anchor" href="#_2-4-huffman-compression-\u300C\u970D\u592B\u66FC\u538B\u7F29\u300D\u300C\u970D\u592B\u66FC\u7F16\u7801\u300D" aria-hidden="true">#</a> 2.4 huffman Compression \u300C\u970D\u592B\u66FC\u538B\u7F29\u300D\u300C\u970D\u592B\u66FC\u7F16\u7801\u300D</h3><ul><li><p>\u76EE\u7684\uFF1A\u4F7F\u7528\u6700\u5C11\u7684\u6BD4\u7279\u6765\u5B58\u50A8\u6587\u4EF6\u6216\u4F20\u8F93\u4FE1\u606F\uFF1B</p></li><li><p>\u7B56\u7565\uFF1A\u7528\u8F83\u5C11\u7684\u6BD4\u7279\u8868\u793A\u51FA\u73B0\u9891\u7387\u8F83\u9AD8\u7684\u5B57\u7B26\uFF0C\u7528\u8F83\u591A\u7684\u6BD4\u7279\u8868\u793A\u51FA\u73B0\u9891\u7387\u4F4E\u7684\u5B57\u7B26\uFF1B</p></li><li><p>\u5728\u4FE1\u606F\u8BBA\u548C\u7F16\u7801\u7406\u8BBA\u4E2D\u90FD\u4F1A\u51FA\u73B0\u7684\u6982\u5FF5\uFF1B</p></li><li><p>\u4E00\u822C\u4F7F\u7528\u524D\u7F00\u7801\uFF0C\u907F\u514D\u51FA\u73B0\u7801\u5B57\u4E0D\u552F\u4E00\u7684\u60C5\u51B5\u3002</p></li><li><p>Python\u7F16\u7A0B\u5B9E\u73B0</p></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> heapq
<span class="token keyword">import</span> collections

<span class="token keyword">def</span> <span class="token function">get_rate</span><span class="token punctuation">(</span>compressed_binary<span class="token punctuation">,</span> uncompressed_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>compressed_binary<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> uncompressed_bits

<span class="token keyword">class</span> <span class="token class-name">SimpleCompression</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>symbols <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bit_len <span class="token operator">+=</span><span class="token number">1</span>
        <span class="token keyword">while</span> <span class="token number">2</span><span class="token operator">**</span>self<span class="token punctuation">.</span>bit_len <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>symbols<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>bit_len <span class="token operator">+=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>string <span class="token operator">=</span> string

        self<span class="token punctuation">.</span>s2b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>b2s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> s <span class="token keyword">in</span> self<span class="token punctuation">.</span>symbols<span class="token punctuation">:</span>
            b <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>bit_len<span class="token punctuation">:</span>
                b <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>bit_len <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> b
            self<span class="token punctuation">.</span>s2b<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> b
            self<span class="token punctuation">.</span>b2s<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> s
            i <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bits <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">for</span> s <span class="token keyword">in</span> self<span class="token punctuation">.</span>string<span class="token punctuation">:</span>
            bits <span class="token operator">+=</span> self<span class="token punctuation">.</span>s2b<span class="token punctuation">[</span>s<span class="token punctuation">]</span>
        <span class="token keyword">return</span> bits

    <span class="token keyword">def</span> <span class="token function">uncompress</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        string <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bit_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
            string <span class="token operator">+=</span> self<span class="token punctuation">.</span>b2s<span class="token punctuation">[</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>bit_len<span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> string


<span class="token keyword">class</span> <span class="token class-name">HuffmanCompression</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">,</span> char<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
            self<span class="token punctuation">.</span>char <span class="token operator">=</span> char
            self<span class="token punctuation">.</span>coding <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
            self<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span>

        <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>val <span class="token operator">==</span> other<span class="token punctuation">.</span>val

        <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>val

        <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>val

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>string <span class="token operator">=</span> string
        counter <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> char<span class="token punctuation">,</span> cnt <span class="token keyword">in</span> counter<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> HuffmanCompression<span class="token punctuation">.</span>Trie<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>
            right <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>
            trie <span class="token operator">=</span> HuffmanCompression<span class="token punctuation">.</span>Trie<span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            trie<span class="token punctuation">.</span>left<span class="token punctuation">,</span> trie<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">,</span> right
            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> trie<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>root <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>s2b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>bfs_encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> self<span class="token punctuation">.</span>s2b<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">bfs_encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> s2b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
            node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> node<span class="token punctuation">.</span>char<span class="token punctuation">:</span>
                s2b<span class="token punctuation">[</span>node<span class="token punctuation">.</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>coding
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>coding <span class="token operator">=</span> node<span class="token punctuation">.</span>coding <span class="token operator">+</span> <span class="token string">&#39;0&#39;</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>coding <span class="token operator">=</span> node<span class="token punctuation">.</span>coding <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bits <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">for</span> char <span class="token keyword">in</span> self<span class="token punctuation">.</span>string<span class="token punctuation">:</span>
            bits <span class="token operator">+=</span> self<span class="token punctuation">.</span>s2b<span class="token punctuation">[</span>char<span class="token punctuation">]</span>
        <span class="token keyword">return</span> bits

    <span class="token keyword">def</span> <span class="token function">uncompress</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        string <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        root <span class="token operator">=</span> self<span class="token punctuation">.</span>root
        <span class="token keyword">for</span> bit <span class="token keyword">in</span> bits<span class="token punctuation">:</span>
            <span class="token keyword">if</span> bit <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">:</span>
                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right
            <span class="token keyword">if</span> root<span class="token punctuation">.</span>char<span class="token punctuation">:</span>
                string <span class="token operator">+=</span> root<span class="token punctuation">.</span>char
                root <span class="token operator">=</span> self<span class="token punctuation">.</span>root
        <span class="token keyword">return</span> string


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token string">&#39;everyday is awesome!&#39;</span>
    <span class="token comment"># ASCII</span>
    bits <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Total bits: %d&#39;</span> <span class="token operator">%</span> bits<span class="token punctuation">)</span>

    <span class="token comment"># simple compression</span>
    sc <span class="token operator">=</span> SimpleCompression<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    compressed <span class="token operator">=</span> sc<span class="token punctuation">.</span>compress<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Compressed binary: &#39;</span> <span class="token operator">+</span> compressed<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Uncompressed: &#39;</span> <span class="token operator">+</span> sc<span class="token punctuation">.</span>uncompress<span class="token punctuation">(</span>compressed<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span>s2b<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Simple Compression-compress rate: %d%%&#39;</span> <span class="token operator">%</span> get_rate<span class="token punctuation">(</span>compressed<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;===================&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># huffman compression</span>
    hc <span class="token operator">=</span> HuffmanCompression<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    compressed <span class="token operator">=</span> hc<span class="token punctuation">.</span>compress<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Compressed binary: &#39;</span> <span class="token operator">+</span> compressed<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Uncompressed: &#39;</span> <span class="token operator">+</span> hc<span class="token punctuation">.</span>uncompress<span class="token punctuation">(</span>compressed<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>hc<span class="token punctuation">.</span>s2b<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Huffman Compression-compress rate: %d%%&#39;</span> <span class="token operator">%</span> get_rate<span class="token punctuation">(</span>compressed<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token triple-quoted-string string">&quot;&quot;&quot;
Total bits: 160
Compressed binary: 00101011001010001100001100001100000101000111000100001010001001110110010100101001
Uncompressed: everyday is awesome!
{&#39;a&#39;: &#39;0000&#39;, &#39; &#39;: &#39;0001&#39;, &#39;e&#39;: &#39;0010&#39;, &#39;d&#39;: &#39;0011&#39;, &#39;i&#39;: &#39;0100&#39;, &#39;m&#39;: &#39;0101&#39;, &#39;o&#39;: &#39;0110&#39;, &#39;s&#39;: &#39;0111&#39;, &#39;r&#39;: &#39;1000&#39;, &#39;!&#39;: &#39;1001&#39;, &#39;w&#39;: &#39;1010&#39;, &#39;v&#39;: &#39;1011&#39;, &#39;y&#39;: &#39;1100&#39;}
Simple Compression-compress rate: 50%
===================
Compressed binary: 011001011011110011010111111000010000111000111111010011110100011011010001
Uncompressed: everyday is awesome!
{&#39;!&#39;: &#39;0001&#39;, &#39; &#39;: &#39;001&#39;, &#39;e&#39;: &#39;01&#39;, &#39;d&#39;: &#39;11010&#39;, &#39;i&#39;: &#39;0000&#39;, &#39;m&#39;: &#39;11011&#39;, &#39;o&#39;: &#39;1000&#39;, &#39;s&#39;: &#39;1110&#39;, &#39;r&#39;: &#39;1011&#39;, &#39;a&#39;: &#39;1111&#39;, &#39;w&#39;: &#39;1010&#39;, &#39;v&#39;: &#39;1001&#39;, &#39;y&#39;: &#39;1100&#39;}
Huffman Compression-compress rate: 45%
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br></div></div><h3 id="_2-5-queue-\u300C\u961F\u5217\u300D" tabindex="-1"><a class="header-anchor" href="#_2-5-queue-\u300C\u961F\u5217\u300D" aria-hidden="true">#</a> 2.5 Queue \u300C\u961F\u5217\u300D</h3><p>\u5728Java\u4E2D\uFF0CQueue\u662F\u63A5\u53E3\uFF0C\u4E00\u79CD\u5B9E\u73B0\u5C31\u662FLinkedList\uFF0CLinkedList\u5411\u4E0A\u8F6C\u578B\u4E3AQueue\uFF0C\u961F\u5217\u4E0D\u80FD\u5B58\u50A8null\u5143\u7D20\uFF0C\u5426\u5219\u4E0Epoll()\u7B49\u65B9\u6CD5\u7684\u8FD4\u56DE\u503C\u6DF7\u6DC6\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> qLen <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-6-heap-\u300C\u5806\u300D" tabindex="-1"><a class="header-anchor" href="#_2-6-heap-\u300C\u5806\u300D" aria-hidden="true">#</a> 2.6 Heap \u300C\u5806\u300D</h3><p>\u4E00\u822C\u5206\u4E3A\u5927\u6839\u5806\u548C\u5C0F\u6839\u5806\uFF0C\u5728\u6392\u5E8F\u4E2D\u4E00\u822C\u7528\u5806\u6392\u5E8F\u3002</p><h3 id="_2-7-stack-\u300C\u6808\u300D" tabindex="-1"><a class="header-anchor" href="#_2-7-stack-\u300C\u6808\u300D" aria-hidden="true">#</a> 2.7 Stack \u300C\u6808\u300D</h3>`,36);function w(v,_){const a=t("ExternalLinkIcon");return e(),o(l,null,[i,n("ul",null,[k,b,n("li",null,[m,n("a",d,[f,c(a)]),h]),y]),g],64)}var q=p(r,[["render",w],["__file","2019-06-23-\u6570\u636E\u7ED3\u6784\u3001\u7B97\u6CD5\u77E5\u8BC6\u56DE\u987E(Java).html.vue"]]);export{q as default};
